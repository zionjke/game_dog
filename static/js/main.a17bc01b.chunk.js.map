{"version":3,"sources":["dog.mp3","assets/duck1.gif","Item.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Item","render","className","onClick","props","src","duck","alt","React","Component","App","state","item","counter","randomIndex","audio","Audio","dogaudio","onClickCounter","setState","play","getRandomImageIndex","Math","floor","random","itemList","map","index","key","setInterval","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,0MCqB5BC,E,4MAfbC,OAAS,WAEP,OACI,yBAAKC,UAAU,QACX,yBAAKC,QAAS,EAAKC,MAAMD,QACpBD,UAAW,EAAKE,MAAMF,UACtBG,IAAKC,IACLC,IAAI,U,YATFC,IAAMC,WCuDVC,E,4MApDXC,MAAQ,CACJC,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/BC,QAAS,EACTC,YAAa,G,EAGjBC,MAAQ,IAAIC,MAAMC,K,EAElBC,eAAiB,WACb,EAAKC,SAAS,CACVN,QAAS,EAAKF,MAAME,QAAU,IAElC,EAAKE,MAAMK,Q,EAGfC,oBAAsB,WAClB,OAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,W,EAY3BvB,OAAS,WAEL,IAAIwB,EAAW,EAAKd,MAAMC,KAAKc,KAAI,SAACd,EAAMe,GACtC,OAAIA,IAAU,EAAKhB,MAAMG,YACd,kBAAC,EAAD,CAAMc,IAAKD,EAAOxB,QAAS,EAAKe,eAAgBhB,UAAU,eAE1D,kBAAC,EAAD,CAAM0B,IAAKD,EAAOzB,UAAU,aAI3C,OACI,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WACVuB,EACD,yBAAKvB,UAAU,WACX,8BAAO,EAAKS,MAAME,a,kEAxBjB,IAAD,OAChBgB,aAAY,WACR,EAAKV,SAAS,CACVL,YAAa,EAAKO,0BAEvB,S,GA1BOb,IAAMC,WCOJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlC,OACP,kBAAC,IAAMmC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a17bc01b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dog.ba5debab.mp3\";","module.exports = __webpack_public_path__ + \"static/media/duck1.d3547231.gif\";","import React from 'react';\nimport './App.css'\nimport duck from './assets/duck1.gif'\n\nclass Item extends React.Component {\n\n  render = () => {\n\n    return (\n        <div className=\"item\">\n            <img onClick={this.props.onClick}\n                 className={this.props.className}\n                 src={duck}\n                 alt=\"dog\"/>\n        </div>\n    );\n  }\n}\n\n\n\nexport default Item;\n","import React from 'react';\nimport './App.css'\nimport dogaudio from './dog.mp3'\nimport Item from \"./Item\";\n\nclass App extends React.Component {\n\n    state = {\n        item: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        counter: 0,\n        randomIndex: 0\n    };\n\n    audio = new Audio(dogaudio)\n\n    onClickCounter = () => {\n        this.setState({\n            counter: this.state.counter + 1\n        })\n        this.audio.play()\n    }\n\n    getRandomImageIndex = () => {\n        return Math.floor(Math.random() * 9);\n    }\n\n    componentDidMount() {\n        setInterval(() => {\n            this.setState({\n                randomIndex: this.getRandomImageIndex()\n            })\n        }, 1000)\n    }\n\n\n    render = () => {\n\n        let itemList = this.state.item.map((item, index) => {\n            if (index === this.state.randomIndex) {\n                return <Item key={index} onClick={this.onClickCounter} className=\"photo show\"/>\n            } else {\n                return <Item key={index} className=\"photo\"/>\n            }\n        });\n\n        return (\n            <div className=\"App\">\n                <div className=\"wrapper\">\n                    {itemList}\n                    <div className=\"counter\">\n                        <span>{this.state.counter}</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}